name: OnPush

on:
  push:
    branches: [ "main" ]

jobs:
  build-package:
    runs-on: ${{matrix.os}}

    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        compiler: [MSVC, MinGW]
        include:
          - os: windows-latest
            compiler: MSVC
            triplet: x64-windows
          - os: windows-latest
            compiler: MinGW
            triplet: x64-mingw-dynamic
        

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Export GitHub Actions Cache Environment Variables
      uses: actions/github-script@v7
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

    - name: Setup Ninja
      uses: ashutoshvarma/setup-ninja@master
      with:
        version: 1.11.0

    - name: Install MinGW
      if: matrix.compiler == 'MinGW'
      uses: egor-tensin/setup-mingw@v2
      with:
        platform: x64
        static: 0

    - name: Install vcpkg Windows
      if: runner.os == 'Windows'
      working-directory: ${{github.workspace}}/vcpkg
      run: .\bootstrap-vcpkg.bat

    - name: Install Packages
      working-directory: ${{github.workspace}}
      env:
        VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
      run: vcpkg/vcpkg install --triplet=${{matrix.triplet}}

    - name: Archive vcpkg Logs
      if: ${{ !cancelled() }}
      uses: actions/upload-artifact@v4
      with:
        name: vcpkglogs-${{runner.os}}-${{runner.arch}}-${{matrix.compiler}}-${{github.sha}}
        path: |
          vcpkg/buildtrees/*/*.log
        retention-days: 7
        compression-level: 9

  build:
    needs: [build-package]
    runs-on: ${{matrix.os}}

    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        build_type: [Debug, Release]
        compiler: [MSVC, MinGW]
        include:
          - os: windows-latest
            compiler: MSVC
            c_compiler: cl
            cxx_compiler: cl
            asm_compiler: cl
            triplet: x64-windows
          - os: windows-latest
            compiler: MinGW
            c_compiler: gcc
            cxx_compiler: c++
            asm_compiler: ''
            triplet: x64-mingw-dynamic

    permissions:
      id-token: write
      contents: read
      attestations: write

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Export GitHub Actions Cache Environment Variables
      uses: actions/github-script@v7
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

    - name: Setup Ninja
      uses: ashutoshvarma/setup-ninja@master
      with:
        version: 1.11.0

    - name: Install MinGW
      if: matrix.compiler == 'MinGW'
      uses: egor-tensin/setup-mingw@v2
      with:
        platform: x64
        static: 0

    - name: Install vcpkg Windows
      if: runner.os == 'Windows'
      working-directory: ${{github.workspace}}/vcpkg
      run: .\bootstrap-vcpkg.bat

    - name: Initialize MSVC Environment
      if: matrix.compiler == 'MSVC'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{runner.arch}}

    - name: Configure CMake
      working-directory: ${{github.workspace}}
      env:
        CC: ${{matrix.c_compiler}}
        CXX: ${{matrix.cxx_compiler}}
        ASM: ${{matrix.asm_compiler}}
        VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
      run: cmake -G "Ninja" -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DCMAKE_TOOLCHAIN_FILE:STRING=./vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET:STRING=${{matrix.triplet}} -B out/build/${{runner.arch}}-${{matrix.build_type}}-${{matrix.compiler}} .

    - name: Build
      working-directory: ${{github.workspace}}
      run: ninja -C out/build/${{runner.arch}}-${{matrix.build_type}}-${{matrix.compiler}} -j 2 LiteHttpd

    - name: Pre Packing Windows
      if: runner.os == 'Windows'
      working-directory: ${{github.workspace}}
      run: .\prePacking.bat .\out\build\${{runner.arch}}-${{matrix.build_type}}-${{matrix.compiler}}\bin

    - name: Generate Artifact Attestation
      if: runner.os == 'Windows'
      uses: actions/attest-build-provenance@v1
      with:
        subject-path: '"${{github.workspace}}/out/build/${{runner.arch}}-${{matrix.build_type}}-${{matrix.compiler}}/bin/*.exe","${{github.workspace}}/out/build/${{runner.arch}}-${{matrix.build_type}}-${{matrix.compiler}}/bin/*.dll"'
    
    - name: Archive Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: LiteHttpd-${{runner.os}}-${{runner.arch}}-${{matrix.compiler}}-${{matrix.build_type}}-${{github.sha}}
        path: |
          out/build/${{runner.arch}}-${{matrix.build_type}}-${{matrix.compiler}}/bin/**
        compression-level: 9
